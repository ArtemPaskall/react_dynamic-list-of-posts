{"version":3,"sources":["components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/api.ts","api/posts.ts","api/comments.ts","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["Loader","className","PostsList","posts","serverError","selectedPostId","setSelectedPostId","noPostsError","map","post","userId","title","type","onClick","id","NewCommentForm","onCommentAdd","useState","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","placeholder","required","value","onChange","target","BASE_URL","request","url","a","fetch","result","ok","Error","json","getPosts","postsFromServer","getPostDetails","userPostsFromServer","getComments","PostId","commentsFromServer","deleteComment","commentId","method","PostDetails","setPost","comments","setComments","isVisible","setIsVisible","useEffect","then","response","length","comment","postId","headers","JSON","stringify","addComment","getAllUsers","usersFromServer","App","setPosts","setServerError","setNoPostsError","isLoading","setIsLoading","selectedUserId","setSelectedUserId","allUsers","setAllUsers","catch","htmlFor","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a74e5ef2.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport './PostsList.scss';\nimport { Post } from '../../react-app-env';\n\ntype Props = {\n  posts: Post[],\n  serverError: boolean,\n  selectedPostId: number,\n  setSelectedPostId: (id: number) => void,\n  noPostsError: boolean\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  serverError,\n  selectedPostId,\n  setSelectedPostId,\n  noPostsError,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      {serverError ? (\n        <p>No data from server</p>\n      ) : (\n        <>\n          <h2>Posts:</h2>\n          {noPostsError\n            ? <p>This user have no posts</p>\n            : (\n              <ul className=\"PostsList__list\">\n                {posts.map(post => (\n                  <li\n                    className=\"PostsList__item\"\n                    key={post.id}\n                  >\n                    <div>\n                      <b>{`[User #${post.userId}]: `}</b>\n                      {post.title}\n                    </div>\n                    <button\n                      type=\"button\"\n                      className=\"PostsList__button button\"\n                      onClick={() => {\n                        if (selectedPostId === post.id) {\n                          setSelectedPostId(0);\n                        } else {\n                          setSelectedPostId(post.id);\n                        }\n                      }}\n                    >\n                      {post.id === selectedPostId ? 'Close' : 'Open'}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  onCommentAdd: (name: string, email: string, body: string) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onCommentAdd }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const clearInputs = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const onSubmitHndler = (event: React.FormEvent) => {\n    event?.preventDefault();\n    onCommentAdd(name, email, body);\n    clearInputs();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={onSubmitHndler}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function request(url: string) {\n  const result = await fetch(url);\n\n  if (!result.ok) {\n    throw new Error('Server error');\n  }\n\n  return result.json();\n}\n","import { request, BASE_URL } from './api';\n\nexport const getPosts = async () => {\n  const postsFromServer = await request(`${BASE_URL}/posts/`);\n\n  return postsFromServer;\n};\n\nexport const getPostDetails = async (userId: number) => {\n  const userPostsFromServer = await request(`${BASE_URL}/posts/${userId}`);\n\n  return userPostsFromServer;\n};\n","import { request, BASE_URL } from './api';\n\nexport const getComments = async (PostId: number) => {\n  const commentsFromServer = await request(`${BASE_URL}/comments?postId=${PostId}`);\n\n  return commentsFromServer;\n};\n\nexport const addComment = (postId: number, name: string, email: string, body: string) => {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n};\n\nexport const deleteComment = async (commentId: number) => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { addComment, getComments, deleteComment } from '../../api/comments';\nimport { Comment, Post } from '../../react-app-env';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [post, setPost] = useState<Post>();\n  const [comments, setComments] = useState<Comment[]>();\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const onCommentAdd = (name: string, email: string, body: string) => {\n    addComment(selectedPostId, name, email, body);\n  };\n\n  useEffect(() => {\n    getComments(selectedPostId)\n      .then(response => setComments(response));\n  }, [comments]);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(response => setPost(response));\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      <section className=\"PostDetails__post\">\n        <p>{post?.body}</p>\n      </section>\n      <section className=\"PostDetails__comments\">\n        {!isVisible && (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setIsVisible(true)}\n          >\n            {`Show ${comments?.length} comments`}\n          </button>\n        )}\n        {isVisible && (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setIsVisible(false)}\n          >\n            {`Hide ${comments?.length} comments`}\n          </button>\n        )}\n        {isVisible && (\n          <ul className=\"PostDetails__list\">\n            {comments?.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            onCommentAdd={onCommentAdd}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { request, BASE_URL } from './api';\n\nexport const getAllUsers = async () => {\n  const usersFromServer = await request(`${BASE_URL}/users/`);\n\n  return usersFromServer;\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { Loader } from './components/Loader';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getPostDetails } from './api/posts';\nimport { getAllUsers } from './api/users';\nimport { Post, User } from './react-app-env';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [serverError, setServerError] = useState(false);\n  const [noPostsError, setNoPostsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [allUsers, setAllUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    setServerError(false);\n    setNoPostsError(false);\n    if (selectedUserId === 0) {\n      setIsLoading(true);\n      getPosts()\n        .then(response => (setPosts(response)))\n        .then(() => setIsLoading(false))\n        .catch(() => setServerError(true));\n    } else {\n      getPostDetails(selectedUserId)\n        .then(response => (setPosts(response)))\n        .catch(() => setNoPostsError(true));\n\n      setSelectedPostId(0);\n    }\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    getAllUsers()\n      .then(response => (setAllUsers(response)))\n      .catch(() => setServerError(true));\n  }, []);\n\n  const onUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"App__users\">\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            id=\"App__users\"\n            onChange={onUserChange}\n          >\n            <option value=\"0\">All users</option>\n            {allUsers.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <PostsList\n              posts={posts}\n              serverError={serverError}\n              selectedPostId={selectedPostId}\n              setSelectedPostId={setSelectedPostId}\n              noPostsError={noPostsError}\n            />\n          )}\n        </div>\n        <div className=\"App__content\">\n          {(selectedPostId === 0) ? (\n            <p>No post details</p>\n          ) : (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}